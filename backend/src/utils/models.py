from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from argon2 import PasswordHasher
from sqlalchemy.inspection import inspect
import string, random


# Initialize SQLAlchemy and Password hasher
db = SQLAlchemy()
password_hasher = PasswordHasher()

# Class Model to return queries as dict
class ModelMixin:
    def to_dict(self):
        """Automatically converts all columns of the model to a dictionary."""
        return {c.key: getattr(self, c.key) for c in inspect(self).mapper.column_attrs}


def gen_unique_login_id(length=8, max_attempts=3):
    """Generate a unique login_id for a new User using UPPERCASE letters and 0-9 digits."""
    attempts = 0
    characters = string.ascii_uppercase + string.digits
    while attempts < max_attempts:
        login_id = ''.join(random.choice(characters) for _ in range(length))
        if not User.query.filter_by(login_id=login_id).first():
            return login_id
        attempts += 1
    raise Exception("Failed to generate a unique login_id after maximum attempts.")


#######################################################################
#                                                                     #
#                          DATABASE TABLES                            #
#                                                                     #
#######################################################################

# The user table
class User(UserMixin, ModelMixin, db.Model):
    """
    An new User instance.
        :param id: The auto-generated table ID.
        :type id: int
        :param login_id: Unique identifier for the user's login, generated by `gen_unique_login_id()`.
        :type login_id: str
        :param username: The user's login username.
        :type username: str
        :param password: The user's login password.
        :type password: str
        :param canvas_id: Unique identifier for the user on Canvas.
        :type canvas_id: str
        :param canvas_name: The user's name on Canvas.
        :type canvas_name: str
        :param canvas_token_password: The encrypted Canvas token, encrypted using the user's unencrypted password.
        :type canvas_token_password: str
        :param todoist_token_password: The encrypted Todoist token, encrypted using the user's unencrypted password.
        :type todoist_token_password: str
    """
    # Table primary key
    id = db.Column(db.Integer, primary_key=True)

    # Info for login
    login_id = db.Column(db.String(100), unique=True, nullable=False)
    username = db.Column(db.String(100), unique=False, nullable=False)
    password = db.Column(db.String(100), unique=False, nullable=False)

    # Canvas info for user
    canvas_id = db.Column(db.String(150), unique=True, nullable=False)
    canvas_name = db.Column(db.String(150), unique=False, nullable=False)
    
    # Tokens encrypted with password
    canvas_token_password = db.Column(db.String(200), unique=False, nullable=False)
    todoist_token_password = db.Column(db.String(200), unique=False, nullable=False)

    # Tokens encrypted with session key
    canvas_token_session = None         # Placeholder for encrypted token with session key
    todoist_token_session = None        # Placeholder for encrypted token with session key

    # When the `login_manager.user_loader` is run for the login, this is the parameter it will use 
    def get_id(self):
        return str(self.login_id)
